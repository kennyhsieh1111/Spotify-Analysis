View(songs)
View(songs)
feature <- getFeatures(sogns$id[1], token=keys)
feature <- getFeatures(songs$id[1], token=keys)
View(feature)
features <- songs$id
View(feature)
print(features)
rm(feature)
features <- getFeatures(features, token=keys)
features_id <- songs$id
songs[0,0]
print(songs[, 0])
print(songs[0, 0])
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
}, 1:length(features_id))))
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
print(x)
}, 1:length(features_id))))
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
print(x)
}, 1:300)))
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
Sys.time(0.5)
}, 1:300)))
Sys.sleep(0.5)
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
Sys.sleep(0.5)
}, 1:300)))
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
print(x)
Sys.sleep(0.5)
}, 1:300)))
View(features)
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
print(x)
Sys.sleep(0.5)
}, 1:2)))
features <- getFeatures(features_id[0], token=keys)
features <- getFeatures(features_id[1], token=keys)
View(features)
}
for(i in 1:2){
features <- getFeatures(features_id[i], token=keys)
}
View(features)
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
print(x)
Sys.sleep(0.5)
}, 1:2)))
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures(features_id[x], token=keys)
print(x)
Sys.sleep(0.5)
}, 1:1)))
getFeatures_own <- function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), httr::config(token = token))
json1<-data.frame(httr::content(req))
print(class(json1))
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
return(dados)
}
source('Expansion.R')
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
}, 1:length(features_id))))
View(features)
source('Expansion.R')
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
print(x)
}, 1:length(features_id))))
View(features)
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
#print(x)
}, 1:2)))
View(features)
print(x)
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
print(x)
}, 1:2)))
View(features)
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
}, 1:length(features_id))))
getFeatures_own <- function(spotify_ID,token){
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",spotify_ID), httr::config(token = token))
json1<-data.frame(httr::content(req))
dados=data.frame(id=json1$id,
danceability=json1$danceability,
energy=json1$energy,
key=json1$key,
loudness=json1$loudness,
mode=json1$mode,
speechiness=json1$speechiness,
acousticness=json1$acousticness,
instrumentalness=json1$instrumentalness,
liveness=json1$liveness,
valence=json1$valence,
tempo=json1$tempo,
duration_ms=json1$duration_ms,
time_signature=json1$time_signature,
uri=json1$uri,
analysis_url=json1$analysis_url,stringsAsFactors = F)
Sys.time(0.1)
return(dados)
}
source('Expansion.R')
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
}, 1:length(features_id))))
source('Expansion.R')
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
}, 1:length(features_id))))
source('Expansion.R')
features <- as.data.frame(do.call(rbind, Map(function(x){
getFeatures_own(features_id[x], token=keys)
}, 1:length(features_id))))
View(features)
save.image('Songs+Features.RData')
rm(i)
save.image('Songs+Features.RData')
rm(getAllPlaylistSongs())
rm(getAllPlaylistSongs
rm(getAllPlaylistSongs
)
rm(getAllPlaylistSongs)
rm(getAllSongs)
rm(getFeatures_own)
source('Expansion.R')
save.image('Songs+Features.RData')
load('Songs+Features.RData')
View(songs)
View(features)
data <- join(songs, features, by = id)
library(dplyr)
data <- join(songs, features, by = id)
data <- inner_join(songs, features, by = id)
View(songs)
data <- merge(songs, features, by = "id")
View(data)
data <- merge(songs, features, by = "id", all.x = TRUE)
data <- merge(songs, features, by = "id", all.y = TRUE)
View(data)
data <- unique(data)
View(data)
data <- merge(songs, features, by = "id", all.y = TRUE)
duplicated(data)
grep(TRUE, duplicated(data))
grep(TRUE, duplicated(songs))
data <- merge(songs, features, by = "id", all.y = TRUE)
data <- unique(data)
colnames(data)
data <- data[, -c("artistId", "url", "analysis_url")]
data <- data[, -c("artistId", "uri", "analysis_url")]
class(data)
data <- data[, !c("artistId", "uri", "analysis_url")]
data <- data[, !(colnames(df) %in% c("artistId", "uri", "analysis_url"))]
View(data)
data <- data[, !(colnames(data) %in% c("artistId", "uri", "analysis_url"))]
data <- merge(songs, features, by = "id", all.y = TRUE)
data <- unique(data)
data <- data[, !(colnames(data) %in% c("artistId", "uri", "analysis_url"))]
data <- merge(songs, features, by = "id")
data <- unique(data)
data <- data[, !(colnames(data) %in% c("artistId", "uri", "analysis_url"))]
save.image('SongsData.RData')
load('SongsData.RData')
rm(list=ls())
load('SongsData.RData')
summary(data)
class(summary(data))
t <- class(summary(data))
t
t <- summary(data)
t
t[1,]
t[3,]
t[4,]
summary <- summary(data)
summary[4,]
summary[4, -c(1,2)]
summary <- summary(data)
summary[4, ]
summary[4, c(1,2,4,5)]
summary <- summary(data)
summary[4, -c(1,2,4,5)]
ggplot(data = summary[4, -c(1,2,4,5)], aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
library(ggplot2)
summary <- summary(data)
summary[4, -c(1,2,4,5)]
ggplot(data = summary[4, -c(1,2,4,5)], aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
summary[4, -c(1,2,4,5)]
feature_mean <- summary[4, -c(1,2,4,5)]
feature_mean[1]
class(feature_mean[1])
features_mean <- data[, -c(1,2,4,5)]
View(features_mean)
feauture_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
features_mean <- data[, -c(1,2,4,5)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
rm(feauture_mean)
features_mean <- data[, -c(1,2,4,5)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
View(features_mean)
summary(data)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
summary(data)
features_mean <- data[, -c(1,2,4,5,17)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
features_mean <- data[, -c(1,2,4,5,16,17)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
features_mean <- data[, -c(1:5,16,17)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
summary(data)
features_mean <- data[, c(5,6,10,11:14)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
View(features_mean)
summary(data)
View(songs)
View(data)
features_mean <- data[, c(5,6,10,11:14)]
View(features_mean)
summary(data)
features_mean <- data[, c(6,7,10,11:14)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
features_mean <- data[, c(6,7,11:14)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
features_mean <- data[, c(6,7,11:15)]
features_mean <- data.frame(features = colnames(features_mean), means = colMeans(features_mean), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean of Features") + xlab('features')
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean value of the song features of Singles") + xlab('features')
summary(data)
features_mean <- data[, c(6,7,11:15)]
library(matrixStats)
features_std <- data.frame(features = colnames(features), std = colSds(features), row.names = NULL)
View(features)
features <- data[, c(6,7,11:15)]
features_mean <- data.frame(features = colnames(features), means = colMeans(features), row.names = NULL)
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean value of the song features of Singles") + xlab('features')
library(matrixStats)
features_std <- data.frame(features = colnames(features), std = colSds(features), row.names = NULL)
View(features)
colSds(features)
colSds(matrix(features))
a <- matrix(features))
a <- matrix(features)
View(a)
rm(a)
View(playlist)
View(features)
sd(features[,1])
dim(features)
dim(features)[2]
features_std <- Map(function(x){
sd(features[, i])
}, 1:dim(features)[2])
sd(features[, x])
?sapply
features_std <- sapply(features, sd)
features_std
summary(data)
features_std <- data.frame(features = colnames(features), std = sapply(features, sd), row.names = NULL)
View(features_std)
ggplot(data = features_std, aes(x = reorder(features, -std), y = std) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean value of the song features of Singles") + xlab('features')
ggplot(data = features_std, aes(x = reorder(features, -std), y = std)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean value of the song features of Singles") + xlab('features')
ggplot(data = features_std, aes(x = reorder(features, -std), y = std)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean value of the song features of Singles") + xlab('features')
ggplot(data = features_std, aes(x = reorder(features, -std), y = std)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Std value of the song features of Singles") + xlab('features')
mean(features_std[,2])
mean(features_std[,2]); sum(features_std[,2])
colnames(data)
boring <- data[, c(6,7,9,16)]
View(boring)
boring$score <- (data[1]+data[2])*100 + data[3] + data[4]
boring$score <- (data[1]+data[2])*100
boring$score <- (data[1] + data[2])*100
str(boring)
boring$score <- data[1]
boring$score <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
boring <- data[, c(6,7,9,16)]
boring$score <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
boring <- data[, c(6,7,9,16)]
boring$score <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
boring[score] <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
boring['score'] <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
View(boring)
boring <- data[, c(6,7,9,16)]
boring$score <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
boring['score'] <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
boring <- data[, c(6,7,9,16)]
boring['score'] <- (boring[1] + boring[2])*100 + boring[3] + boring[4]
View(boring)
ggplot2(data = boring, aes(score)) + geom_histogram()
ggplot(data = boring, aes(score)) + geom_histogram()
ggplot(data = boring, aes(score)) + geom_histogram(fill = "#17B3B7")
mean(boring[2])
mean(boring[5])
mean(boring[, 5])
ggplot(data = features_mean, aes(x = reorder(features, -means), y = means)) + geom_bar(stat = 'identity', fill = "#17B3B7") +
ggtitle("Mean value of the song features of Singles") + xlab('features')
install.packages('threejs')
load('SongsData.RData')
View(data)
View(data)
hyper <- data[, 6:7]
View(hyper)
ggplot(data = hyper, aes(x = energy, y = danceability)) + geom_point()
library(ggplot2)
ggplot(data = hyper, aes(x = energy, y = danceability)) + geom_point()
library(highcharter)
hyper <- data[, 2,6:7]
hyper <- data[, c(2,6:7)]
View(hyper)
hchart(hyper, "scatter", hcaes(x = energy, y = danceability))
hchart(hyper, "scatter", hcaes(x = energy, y = danceability, group = tracks))
library(dplyr)
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_title(text = "Kenny's Spotify Distribution")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "",valueDecimals=2,borderWidth=2,
hideDelay=100,useHTML=T,padding=7,
pointFormat="{point.tracks}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "",valueDecimals=2,borderWidth=2,
hideDelay=100,useHTML=T,padding=7,
pointFormat="{point.tracks}{point.energy}{point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "",valueDecimals=2,borderWidth=2,
hideDelay=100,useHTML=T,padding=7,
pointFormat="{point.tracks}<br>{point.energy}<br>{point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "",valueDecimals=2,borderWidth=2,
hideDelay=100,useHTML=T,padding=7,
pointFormat="{point.tracks}<br>Energy:{point.energy}<br>Danceability:{point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="{point.tracks}<br>Energy : {point.energy}<br>Danceability : {point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="{point.tracks}<br><b>Energy :</b> {point.energy}<br>Danceability : {point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="<h3>{point.tracks}<h3><br><b>Energy :</b> {point.energy}<br><b>Danceability :</b> {point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="<h4>{point.tracks}<h4><br><b>Energy :</b> {point.energy}<br><b>Danceability :</b> {point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="<h6>{point.tracks}<h6><b>Energy :</b> {point.energy}<br><b>Danceability :</b> {point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="{point.tracks}<b>Energy :</b> {point.energy}<br><b>Danceability :</b> {point.danceability}")
hchart(hyper, "scatter", hcaes(x = energy, y = danceability)) %>%
hc_add_theme(hc_theme_economist()) %>%
hc_title(text = "The Correlation between Energy & Danceability") %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="<b>{point.tracks}</b><br><b>Energy :</b> {point.energy}<br><b>Danceability :</b> {point.danceability}")
library('factoextra')
library('NbClust')
rm(list=ls())
load('SongsData.RData')
library('factoextra')
library('NbClust')
set.seed(123)
View(data)
View(features)
View(data)
opt_km <- NbClust(data = data, distance = "euclidean",
min.nc = 2, max.nc = 15, method = "ward.D", index = "all")
colnames(data)
features_id
View(features)
features_id
colnames(data)
feature_var <- c('danceability, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence', 'tempo')
feature_data <- data[, c(1, feature_var)]
feature_data <- data[, feature_var]
rm(feature_var)
colnames(data)
feature_data <- data[, c(2,6,7,9,11:16)]
View(feature_data)
summary(feature_data)
feature_data <- data[, c(2,6,7,9,11:17)]
View(feature_data)
feature_data <- data[, c(6,7,9,11:17)]
installed.packages('scale')
feature_data <- scale(feature_data)
View(feature_data)
feature_data <- data[, c(6,7,9,11:17)]
feature_data <- scale(feature_data)
View(feature_data)
feature_data <- data[, c(6,7,9,11:17)]
feature_data_t <- scale(feature_data)
class(feature_data)
class(feature_data_t)
feature_data_t <- data.frame(scale(feature_data))
feature_data <- data[, c(6,7,9,11:17)]
feature_data_t <- data.frame(scale(feature_data))
feature_data_t <- data.frame(scale(feature_data, center = TRUE, scale = TRUE))
feature_data <- data[, c(6,7,9,11:17)]
feature_data_t <- data.frame(scale(feature_data, center = TRUE, scale = TRUE))
summary(feature_data)
summary(feature_data_t)
library('factoextra')
library('NbClust')
set.seed(123)
feature_data <- data[, c(6,7,9,11:17)]
feature_data <- data.frame(scale(feature_data, center = TRUE, scale = TRUE))
opt_km <- NbClust(data = feature_data, distance = "manhattan",
min.nc = 2, max.nc = 15, method = "ward.D", index = "all")
opt_km$Best.nc
opt_km$Best.partition
libary(kmeans)
library(kmeans)
rm(feature_data_t)
?kmeans
km_clus <- kmeans(feature_data, 2, iter.max = 10, nstart = 15)
summary(feature_data)
fviz_nbclust(opt_km) + theme_minimal()
fviz_cluster(km_clus, data = feature_data, geom = "point",
stand = FALSE, frame.type = "norm")
?fiz_cluster
??fiz_cluster
?fviz_cluster
fviz_cluster(km_clus, data = feature_data, geom = "point",
stand = FALSE, main = "Kmeans - 2 Clusters", frame.type = "norm")
km_clus$cluster
len(km_clus$cluster)
legth(km_clus$cluster)
n
lnegth(km_clus$cluster)
length(km_clus$cluster)
km_clus <- km_clus$cluster
