objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = 'mlogloss',
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
gamma = 0.3,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = 'mlogloss',
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = 'mlogloss',
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 2,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = 'mlogloss',
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = 'mlogloss',
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
?GridSearchCV
??GridSearchCV
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb.train
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = c('mlogloss', "auc"),
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = "auc",
early_stopping_rounds = TRUE)
?xgb.train
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = "error",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = "error",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "error",
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
num_class = 2,
watchlist = watchlist,
eval_metric = "error",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = "error",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
str(pre_train_label)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
dtrain <- xgb.DMatrix(data = as.matrix(pre_train), label = pre_train_label)
dtest <- xgb.DMatrix(data = as.matrix(pre_test), label = pre_test_label)
watchlist <- list(train=dtrain, test=dtest)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
pre_train_label
pre_train_label <- pre_total[sample_idx, "status"] - 2
dtrain <- xgb.DMatrix(data = as.matrix(pre_train), label = pre_train_label)
watchlist <- list(train=dtrain, test=dtest)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
pre_train_label
pre_train_label <- pre_total[sample_idx, "status"] - 1
library(xgboost)
dtrain <- xgb.DMatrix(data = as.matrix(pre_train), label = pre_train_label)
watchlist <- list(train=dtrain, test=dtest)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
num_class = 2,
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "binary:logistic",
watchlist = watchlist,
eval_metric = "logloss",
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb <- xgb.train(data = dtrain,
eta = 0.1,
max_depth = 5,
alpha = 1,
nrounds = 50,
objective = "multi:softmax",
num_class = 2,
watchlist = watchlist,
eval_metric = "mlogloss",
early_stopping_rounds = TRUE)
xgb_outcome <- predict(xgb, dtest)
t <- table(xgb_outcome + 1, pre_test_label) # Acc: 90%
sum(diag(t))/sum(t)
xgb_outcome
str(xgb_outcome)
rm(list=ls())
load("~/Documents/IM Graduation Project/Dataset/In-line/In-line Date.RData")
library(RJDBC)
library(RMySQL)
drv <- JDBC("com.mysql.jdbc.Driver", "./MySQL_connection/mysql-connector-java-5.0.8-bin.jar", "")
conn <- dbConnect(drv, "jdbc:mysql://140.117.71.149/graduation_project", "root", "0000")
library(RMySQL)
drv <- JDBC("com.mysql.jdbc.Driver", "./MySQL_connection/mysql-connector-java-5.0.8-bin.jar", "")
conn = dbConnect(MySQL(), user='root', password='0000', dbname='graduation', host='140.117.71.149')
dbListTables(conn)
Norm_total <- rbind(norm_0218, norm_0220, norm_0223, norm_0224, norm_0302)
Abnorm_total <- rbind(abnorm_0313, abnorm_0314)
set.seed(17)
sample_norm <- sample(1:nrow(Norm_total), 0.7 * nrow(Norm_total))
sample_abnorm <- sample(1:nrow(Abnorm_total), 0.7 * nrow(Abnorm_total))
Train <- rbind(Norm_total[sample_norm, ], Abnorm_total[sample_abnorm, ])
Test <- rbind(Norm_total[-sample_norm, ], Abnorm_total[-sample_abnorm, ])
lev <- c("Normal", "Abnormal")
Train$status <- as.numeric(factor(Train$status, levels = lev))
Test$status <- as.numeric(factor(Test$status, levels = lev))
write.csv(Train,'Training.csv')
write.csv(Test, 'Testing.csv')
getwd()
print 'Hello, Testing'
print 'Hello'
str
str <- 'Hello'
str
install.packages('sendmailR')
library(sendmailR)
from <- "B036060017@student.nsysu.edu.tw"
to <- "kenny037286@gmail.com"
subject <- "Testing"
body <- "This is the result of the test:"
mailControl=list(smtpServer="snmpt server address")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
mailControl=list(smtpServer="smtp.gmail.com")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
mailControl=list(smtpServer="smtp.gmail.com", smtpPortSMTp="465")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
mailControl=list(smtpServer="smtp.gmail.com", smtpPortSMTp="465", verboseShow=1)
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
mailControl=list(smtpServer="smtp.gmail.com", smtpPortSMTp="587", verboseShow=1)
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
from <- "B036060017@student.nsysu.edu.tw"
to <- "kenny037286@gmail.com"
subject <- "Testing"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
"
"
from <- "kenny037286@gmail.com"
to <- "kenny037286@gmail.com"
subject <- "Testing"
body <- "This is the result of the test:"
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
mailControl=list(smtpServer="ASPMX.L.GOOGLE.COM.")
sendmail(from=from,to=to,subject=subject,msg=body,control=mailControl)
remove.packages('sendmailR')
install.packages('mailR')
library(mailR)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "tal.galili", passwd = "PASSWORD", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 587, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 587, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286@gmail.com", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "kenny037286@gmail.com",
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "jerry30030303@g-mail.nsysu.edu.tw",
subject = "我是專案天才",
body = "測試成功",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "kenny037286@gmail.com",
to = "jerry30030303@g-mail.nsysu.edu.tw",
subject = "我是專案天才",
body = "測試成功",
encoding = "utf-8",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "kenny037286", passwd = "@Edge@3857", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "nsysugradproj@gmail.com",
to = "jerry30030303@g-mail.nsysu.edu.tw",
subject = "Screw Prediction Alarm",
body = "There is something wrong in the factory!!!",
encoding = "utf-8",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "nsysugradproj", passwd = "happytreefriend", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "中山預警",
to = "kenny037286@gmail.com",
subject = "Screw Prediction Alarm",
body = "There is something wrong in the factory!!!",
encoding = "utf-8",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "nsysugradproj", passwd = "happytreefriend", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "nsysugradproj@gmail.com",
to = "kenny037286@gmail.com",
subject = "Screw Prediction Alarm",
body = "There is something wrong in the factory!!!",
encoding = "utf-8",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "nsysugradproj", passwd = "happytreefriend", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
send.mail(from = "nsysugradproj@gmail.com",
to = recipients,
subject = "Screw Prediction Alarm",
body = msgtext,
encoding = "utf-8",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "nsysugradproj", passwd = "happytreefriend", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
recipients <- c("kenny037286@gmail.com")
msgtext <- "Alarm, Alarm, Alarm !"
send.mail(from = "nsysugradproj@gmail.com",
to = recipients,
subject = "Screw Prediction Alarm",
body = msgtext,
encoding = "utf-8",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "nsysugradproj", passwd = "happytreefriend", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
print(a[0])
a <- c(1,2,3)
print(a[0])
print(a[1])
library(swirl)
swirl()
5 +7
exit()
exit
quit''
setwd('~/Documents/Spotify')
load('SongsData.RData')
View(data)
fq_data <- data[, c(2,7,15)]
hchart(fq_data, "scatter", hcaes(x = valence, y = energy)) %>%
hc_xAxis(title = list(text = 'Valence'),
plotLines = list(list(value = 0.5, color = 'grey', width = 2, zIndex = 5)),
max = 1) %>%
hc_yAxis(title = list(text = 'Energy'),
plotLines = list(list(value = 0.5, color = 'grey', width = 2, zIndex = 5)),
max = 1) %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="<b>{point.tracks}</b><br><b>Valence :</b> {point.valence}<br><b>Energy :</b> {point.energy}") %>%
hc_title(text = "Track Sentiment Quadrant") %>%
hc_add_theme(hc_theme_db())
library(highcharter)
library(dplyr)
fq_data <- data[, c(2,7,15)]
hchart(fq_data, "scatter", hcaes(x = valence, y = energy)) %>%
hc_xAxis(title = list(text = 'Valence'),
plotLines = list(list(value = 0.5, color = 'grey', width = 2, zIndex = 5)),
max = 1) %>%
hc_yAxis(title = list(text = 'Energy'),
plotLines = list(list(value = 0.5, color = 'grey', width = 2, zIndex = 5)),
max = 1) %>%
hc_tooltip(headerFormat = "", valueDecimals=2, borderWidth=2,
hideDelay=100, useHTML=T, padding=10,
pointFormat="<b>{point.tracks}</b><br><b>Valence :</b> {point.valence}<br><b>Energy :</b> {point.energy}") %>%
hc_title(text = "Track Sentiment Quadrant") %>%
hc_add_theme(hc_theme_db())
